#! /usr/bin/python

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals

import pexpect
import sys
import time

# Note that, for Python 3 compatibility reasons, we are using spawnu and
# importing unicode_literals (above). spawnu accepts Unicode input and
# unicode_literals makes all string literals in this script Unicode by default.
##x = pexpect.spawnu('./qtestctl')

x = pexpect.spawn('./qtestctl')
x.expect("qTest Manager", timeout = 220)
x.sendline("Y")
x.expect("qTest Sessions")
x.sendline("Y")
x.expect("qTest Parameters")
x.sendline("Y")
x.expect("qTest Insights")
x.sendline("Y")
x.expect("qTest Launch")
x.sendline("Y")
x.expect("qTest Pulse")
x.sendline("Y")
x.expect("qTest Scenario")
x.sendline("Y")
x.expect("Enter the host name or IP address of your PostgreSQL database server")
x.sendline("{{postgres_host}}")
x.expect("Enter the port of your PostgreSQL database server")
x.sendline("{{postgres_port}}")
x.expect("Enable secured connection from qTest app servers to PostgreSQL database server")
x.sendline("N")
x.expect("Enter your PostgreSQL's user name")
x.sendline("{{postgres_username}}")
x.expect("Enter your PostgreSQL's password")
x.sendline("{{postgres_password}}")
x.expect("Enter a database name for Manager")
x.sendline("qtest")
x.expect("Enter your qTest Sessions' database name")
x.sendline("sessions")
x.expect("Enter your qTest Parameters' database name")
x.sendline("parameters")
x.expect("Enter your qTest Pulse/Scenario's database name")
x.sendline("pulse")
x.expect("Enter the host name or IP address of your ElasticSearch server")
x.sendline("{{elasticsearch_host}}")
x.expect("Is your ElasticSearch server using HTTPS")
x.sendline("N")
x.expect("Enter the port of your ElasticSearch server")
x.sendline("{{elasticsearch_port}}")
x.expect("Enable secured connection")
x.sendline("N")
x.expect("Enter the directory where attachments will be stored.")
x.sendline()
x.expect("Enter the directory where logs will be stored.")
x.sendline()
x.expect("Please enter a http port for qTest Manager")
x.sendline()
x.expect("Please enter a URL to access qTest Manager from outside of this machine")
# x.expect("the domain name must be accessible from outside of this machine")
x.sendline()
x.expect("Enable enhanced security option")
x.sendline("N")
x.expect("Provide the domains that you want to whitelist")
# x.expect("whitelist all sub domain under your domain")
time.sleep(0.2)
x.sendline()
x.expect("Specify the storage type where you are going to store qTest Sessions' resource files")
# x.expect("stores resource files on amazon ec2")
time.sleep(0.2)
x.sendline("disk_storage")
x.expect("Enter the location where resource files are store")
x.sendline()
x.expect("Enter a http port for qTest Sessions")
x.sendline()
x.expect("Enable enhanced security option")
x.sendline()
x.expect("Please enter a http port for qTest Insights")
x.sendline()
x.expect("Specify the directory to store saved reports and dashboards")
x.sendline()
x.expect("Enable enhanced security option")
x.sendline()
x.expect("Enter a http port for qTest Parameters")
x.sendline()
x.expect("Enter a http port for qTest Launch")
x.sendline()
x.expect("Enter qTest Launch's public URL")
x.sendline()
x.expect("Enter a http port for qTest Pulse")
x.sendline()
x.expect("Enter qTest Pulse's public URL")
x.sendline()
x.expect("Enter qTest Pulse log location.")
x.sendline()
x.expect("Enter a http port for qTest Scenario")
x.sendline()
x.expect("Enter qTest Scenario's public URL")
x.sendline()
x.expect("BUILD SUCCESSFUL")
time.sleep(0.2)

if x.isalive():
   x.close()
